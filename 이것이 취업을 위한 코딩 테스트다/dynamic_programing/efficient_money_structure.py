# 효율적인 화폐 구성

# N가지 종류의 화폐가 있다.
# 이 화폐의 개수를 최소한으로 이용해서 그 가치의 합이 M원이 되도록 하려고 한다.
# 각 화폐는 몇 개라도 사용할 수 있고, 사용한 화폐의 구성은 같지만 순서만 다른 것은 같은 경우로 구분한다.
# 예) 2원, 3원 단위의 화폐가 있을 때, 15원을 만들기 위해 3원을 5개 사용하는 것이 가장 최소한의 화폐 개수이다.

# 입력 조건
# 1. 첫째 줄에 N, M이 주어진다.
# 2. 이후 N개의 줄에는 각 화폐의 가치가 주어진다. 화폐의 가치는 10,000보다 작거나 같은 자연수이다.

# 출력 조건
# 1. 첫째 줄에 M원을 만들기 위한 최소한의 화폐 개수를 출력한다.
# 2. 불가능할 때는 -1을 출력한다.

# 접근 방식
# 1. 10000을 담고 있는 d를 만든다.
# 2. 각 d에는 해당 인덱스 가치를 만들 수 있는지 or 만들기 위한 최소한의 화폐 개수가 저장된다.
# 3. 예) n = 2, m = 15 [2, 3] 일때,
#   d[2] = 2, d[3] = 3, d[4] = 2 + d[2], d[5] = 3 + d[2], d[6] = 3 + d[3], d[7] = 2 + d[5]

# 풀이
n, m = map(int, input().split())

money_array = []
for i in range(n):
    money_array.append(int(input()))

d = [10001] * (m + 1)

# 다이나믹 프로그래밍 진행(보텀업)
d[0] = 0
for i in range(n):
    for j in range(money_array[i], m + 1):
        if d[j - money_array[i]] != 10001:
            d[j] = min(d[j], d[j - money_array[i]] + 1)

# 계산된 결과 출력
if d[m] == 10001:
    print(-1)
else:
    print(d[m])