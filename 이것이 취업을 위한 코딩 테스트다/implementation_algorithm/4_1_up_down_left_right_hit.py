# 상하좌우
# 여행가 A가 존재한다고 할 때, N X N 크기의 정사각형 공간위에 서 있다.
# 이 공간은 1 X 1 크기의 정사각형으로 나눠져있다.
# 가장 왼쪽 위 좌표는 (1, 1)이며, 가장 오른쪽 아래 좌표는 (N X N) 이다.
# 여행가 A는 주어지는 문자에 따라 (1, 1)에서 부터 시작해 이동을 한다.
# 주어지는 문자는 U(위로 1칸), D(아래로 1칸), L(왼쪽으로 1칸), R(오른쪽으로 1칸) 이다.
# 이때, 갈 수 없는 위치로 문자가 지시한다면, 해당 문자는 무시한다.
# 계획서가 주어졌을 때, 여행가 A가 최종적으로 도착할 지점의 좌표를 출력하는 프로그램을 작성하시오.

# 입력 조건
# 첫재 줄에 공간의 크기를 나타내는 N이 주어진다.(1 <= N <= 100)
# 둘째 줄에 여행가 A가 이동할 계획서 내용이 주어진다. (1 <= 이동 횟수 <= 100)

# 출력 조건
# 첫째 줄에 여행가 A가 최종적으로 도착할 지점의 좌표 (X, Y)를 공백으로 구분하여 출력한다.

# 접근 방식
# 1. L, R, U, D에 따른 이동 방향과 dx, dy를 정의한다.
#   해당 만들어진 리스트로 반복되는 코드를 줄일 수 있다.
# 2. 이동 계획을 하나씩 확인한다. (반복문)
# 3. 이동 후의 좌표를 구한다.
# 4. 이때, 공간을 벗어나는 경우 무시하는 로직을 넣는다.
# 5. 최종적으로 이동 좌표를 출력한다.

n = int(input())
plan_list = list(map(str, input().split()))
x, y = 1, 1

# L, R, U, D 와 dx, dy의 값을 정의한다.
dx = [0, 0, -1, 1]
dy = [-1, 1, 0, 0]
move_types = ['L', 'R', 'U', 'D']

for plan in plan_list:
    #이동 후 좌표를 구한다.
    for i in range(len(move_types)):
        if plan == move_types[i]:
            nx = x + dx[i]
            ny = y + dy[i]
        #공간을 벗어나는 경우 무시
    if nx < 1 or ny < 1 or nx > n or ny > n:
        continue
    x, y = nx, ny

print(x, y)
