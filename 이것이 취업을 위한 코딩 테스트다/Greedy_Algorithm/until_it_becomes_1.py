# 어떤 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고한다.
# 단, 두 번째 연산은 N이 K로 나누어떨어질 때만 선택할 수 있다.
# 1. N에서 1을 뺀다.
# 2. N을 K로 나눈다.
# 위 두 절차를 조합하여 N이 1이되는 최소한의 횟수를 구하여라

# 입력조건
# 첫째 줄에 N(2<= N <= 100,000)과 K(2 <= K <= 100,000)가 공백으로 구분되며 각각 자연수로 주어진다.
# 이때, 입력으로 주어지는 N은 항상 K보다 크거나 같다.

# 출력조건
# 첫째 줄에 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 횟수의 최솟값을 출력한다.

# 접근방식
# 1. N을 K로 나눴을 때, 나머지가 존재하는지 검사한다.
# 2. 나머지가 발생한다면, 1번째 방법을 진행한다.
# 3. 나머지가 발생하지 않을 때 까지 1 ~ 2번 동작을 반복하다.
# 4. 나머지가 발생하지 않으면, 2번째 방법을 진행한다.
# 5. N값이 1이 될 때까지 4번 동작을 반복한다.

n, k = map(int, input().split())
count = 0

while n != 1:
    if n % k == 0:
        n = n // k
        count += 1
    else:
        n = n - 1
        count += 1

print(count)