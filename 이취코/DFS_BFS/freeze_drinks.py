# 음료수 얼려 먹기
# N X M 크기의 얼음틀이 있다.
# 구멍이 뚫려 있는 부분은 0, 칸막이가 존재하는 부분은 1로 표시된다.
# 구멍이 뚫려 있는 부분끼리 상, 하, 좌, 우로 붙어 있는 경우 서로 연결되어 있는 것으로 간주한다.
# 얼음 틀이 주어졌을 때, 생성되는 총 아이스크림의 개수를 구하는 프로그램을 작성하시오.
# 예시)
# 4 X 5
# 00110
# 00011
# 11111
# 00000
# 아이스크림이 총 3개 생성된다.

# 입력 조건
# 1. 첫 번째 줄에 얼음 틀의 세로 길이 N과 가로 길이 M이 주어진다.(1 <=N,M<= 1,000)
# 2. 두 번째 줄부터 N + 1 번째 줄까지 얼음 틀의 형태가 주어진다.
# 3. 이때, 구멍이 뚫려있는 부분은 0, 그렇지 않은 부분은 1이다.

# 출력 조건
# 1. 한번에 만들 수 있는 아이스크림의 개수를 출력한다.

# 접근 방식
# 1. 입력된, N x M 크기의 얼음틀을 노드 리스트 graph로 만든다. 예시) [[], [(1,2), (2,1)], [(1,1), (2,2), (1,3)] ...]
# 2. graph에서 1로 된 칸막이의 좌표를 뺀다. 예시) [[], [(1,2), (2,1)], [(1,1), (2,2)] ...]
# 3. DFS를 만든 후 재귀가 선언되기 전에, 카운트를 먹인다.

# 접근 방식_풀이
# 1. dfs를 이용해 인접한 노드(얼음틀)을 찾아주는 메서드를 만들어낸다.
# 2. 이미 방문한 노드는 다시 방문하지 않도록 방문처리를 해준다. 0 -> 1
# 3. dfs가 한번이라도 실행된다면, 카운트를 먹인다.

# 풀이

# N, M을 입력받기
n, m = map(int, input().split())

# 2차원 리스트의 맵 정보 입력받기
graph = []
for i in range(n):
    graph.append(list(map(int, input())))

# DFS로 특정한 노드를 방문한 뒤에 연결된 모든 노드들도 방문
def dfs(x, y):
    # 주어진 범위를 벗어나는 경우에는 즉시 종료
    if x <= -1 or x >= n or y <= -1 or y >=m:
        return False

    # 현재 노드를 아직 방문하지 않았다면
    if graph[x][y] == 0:
        # 해당 노드 방문 처리
        graph[x][y] = 1
        # 상, 하, 좌, 우의 위치도 모두 재귀적으로 호출
        dfs(x -1, y)
        dfs(x, y - 1)
        dfs(x + 1, y)
        dfs(x, y + 1)
        return True
    return False

# 모든 노드(위치)에 대하여 음료수 채우기
result = 0
for i in range(n):
    for j in range(m):
        # 현재 위치에서 DFS 수행
        if dfs(i, j) == True:
            result += 1

print(result)