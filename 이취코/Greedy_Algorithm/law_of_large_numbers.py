# 문제
# 다양한 수로 이루어진 배열이 있을 때 주어진 수들을 M번 더하여 가장 큰 수를 만드는 법칙이다.
# 단, 배열의 특정한 인덱스(번호)에 해당하는 수가 연속해서 K번을 초과하여 더해질 수 없는 것이 이 법칙의 특징이다.

# 예시 1)
# [2, 4, 5, 4, 6], M = 8, K = 3
# 6 + 6 + 6 + 5 + 6 + 6 + 6 + 5 = 46

# 예시 2)
# [3, 4, 3, 4, 3], M = 7, K = 2
# 4 + 4 + 4 + 4 + 4 + 4 + 4 = 28

# 입력 조건
# 1. 첫째 줄에 N(2<=N<=1,000), M(1<=M<=10,000), K(1<=K<=10,000)의 자연수가 주어지며, 각 자연수는 공백으로 구분한다.
# 2. 둘째 줄에 N개의 자연수가 주어진다. 각 자연수는 공백으로 구분한다. 단, 각각의 자연수는 1 이상 10,000 이하의 수로 주어진다.
# 3. 입력으로 주어지는 K는 항상 M보다 작거나 같다.

# 출력 조건
# 1. 첫째 줄에 동빈이의 큰 수의 법칙에 따라 더해진 답을 출력한다.

# 접근 방식
# 1. 배열을 갖고 가장 큰 값을 구해야 하므로 그리디 알고리즘을 활용하자
# 2. 배열의 가장 큰 값을 갖는 원소를 찾는다.
# 3. 배열의 가장 큰 값을 K번 더한다.
# 4. 다음으로 큰 값을 1번 더한다.
# 5. 3번과 4번을 M번 만큼 실행한다.

# 풀이
# N, M, K 공백으로 구분하여 입력받기
N, M, K = list(map(int, input().split()))
# N개의 수를 공백으로 구분하여 입력받기
value_array = list(map(int, input().split()))

# value_array 정렬
value_array.sort()

# 결과 값, K 카운트 값 감지 세팅
count = 0
result = 0

for i in range(M):
    if K == count: # count가 K만큼 수행 됬을 경우 다음으로 큰 값을 더한다.
        result += value_array[-2]
        count = 0
    else: # count가 K보다 작을 경우 큰 값을 더한다.
        result += value_array[-1]
        count += 1

print(result)