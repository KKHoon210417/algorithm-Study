# 무지의 먹방 라이브

# 회전판에 먹어야 할 N개의 음식이 있다.
# 각 음식은 1 ~ N까지 번호가 붙어있습니다.
# 음식은 다음과 같은 순서로 섭취합니다.
# 1. 1번 음식부터 먹기 시작하며, 회전판은 번호가 증가하는 순서대로 음식을 무지앞으로 가져다 놓는다.
# 2. 마지막 번호의 음식을 섭치한 후에는 회전판에 의해 다시 1번 음식이 무지 앞으로 옵니다.
# 3. 무지는 음식 하나를 1초 동안 섭취한 후 남은 음식은 그대로 두고, 다음 음식을 섭취합니다.
#   다음 음식이란, 아직 남은 음식 중 다음으로 섭취해야 할 가장 가까운 번호의 음식을 말합니다.
# 4. 회전판이 다음 음식을 무지 앞으로 가져오는데 걸리는 시간은 없다고 가정합니다.
# 무지가 먹방을 시작한 지 K초 후에 네트워크 장애로 인해 방송이 잠시 중단되었다.
# 네트워크 정상이 된 후 다시 방송을 이어나갈 때, 몇 번 음식부터 섭취해야 하는지 알고자 한다.
# 각 음식을 모두 먹는데 필요한 시간이 담겨 있는 배열 food_times, 네트워크 장애가 발생한 시간 K초가 매개변수로 주어질 때,
# 몇 번 음식부터 다시 섭취하면 되는지 return 하도록 solution 함수를 완성하세요.

# 제한 조건
# 1. food_times는 각 음식을 모두 먹는데 필요한 시간이 음식의 번호 순서대로 들어 있는 배열입니다.
# 2. k는 방송이 중단된 시간을 나타냅니다.
# 3. 만약 더 섭취해야 할 음식이 없다면 -1을 반환하면 됩니다.

# 접근 방법
# 1. food_times의 0번부터 차례대로 원소의 값을 -1씩 한다.
# 2. 원소가 0이라면, 해당 인덱스는 더이상 -1을 하지않고 넘어간다.
# 3. 네트워크 장애가 발생한 시간 k초 다음의 나올 음식을 반환한다.
# 4. 만약 모든 배열의 원소가 0이라면, -1을 출력한다.
# 5. food_times의 0번 인덱스는 1번 음식이다.

# 풀이

# 입력 조건 넣어주기
food_times = [3, 1, 2]
k = 5

# solution 함수 정의
def solution(food_times, k):
    index = 0 # 다음으로 나와야 할 음식의 인덱스를 저장한다.
    # food_times의 모든 원소가 0이 될때까지 반복한다.
    while food_times:
        if food_times[index] == 0:
            index += 1
        else:
            k -= 1
            # 1초 당 food_times를 하나씩 제거한다.
            food_times[index] = food_times[index] - 1
            index += 1
        # index값이 food_times 범위를 벗어나면 다시 0으로 초기화
        if index >= len(food_times):
            index = 0
        # k만큼의 시간이 지나면, 반복문을 종료한다.
        if k == 0:
            return index + 1
    return -1

print(solution(food_times, k))